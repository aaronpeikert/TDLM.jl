var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TDLM","category":"page"},{"location":"#TDLM","page":"Home","title":"TDLM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TDLM.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TDLM]","category":"page"},{"location":"#Simulate","page":"Home","title":"Simulate","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TDLM.Simulate]","category":"page"},{"location":"#TDLM.Simulate.Noise","page":"Home","title":"TDLM.Simulate.Noise","text":"Noise()\n\nAdd noise of a certain distribution to an array adopting the shape an structure of the array. If nothing else specified, randn is used, otherwise it is sampled from the distribution.\n\njulia> using TDLM.Simulate\n\njulia> zeros(3, 3) + Noise();\n\njulia> ones(Int16, 3, 3) + Noise([1, 2, 3]);\n\njulia> import Distributions\n\njulia> zeros(3, 3) + Noise(Distributions.Beta());\n\njulia> using StableRNGs # results above are suppressed, here reproducible:\n\njulia> zeros(2, 2) + Noise(Distributions.Normal(), StableRNG(42))\n2×2 Matrix{Float64}:\n -0.670252  1.37363\n  0.447122  1.30954\n\n\n\n\n\n","category":"type"},{"location":"#TDLM.Simulate.rand_cov","page":"Home","title":"TDLM.Simulate.rand_cov","text":"rand_cov(k::Int, [rng = Random.GLOBAL_RNG])\n\nGenerate a random covariance matrix of size k×k.\n\njulia> using TDLM.Simulate\n\njulia> rand_cov(3, StableRNGs.StableRNG(42))\n3×3 Matrix{Float64}:\n  1.39477     0.156631   -0.0456395\n  0.156631    1.54293    -0.0163959\n -0.0456395  -0.0163959   0.797937\n\n\n\n\n\n","category":"function"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"EditURL = \"https://github.com/aaronpeikert/TDLM.jl/blob/main/docs/src/long/eLife.jl\"","category":"page"},{"location":"md/eLife/#eLife","page":"Translation eLife","title":"eLife","text":"","category":"section"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Here I go over the scripts that accompied:","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Yunzhe Liu, Raymond J Dolan, Cameron Higgins, Hector Penagos, Mark W Woolrich, H Freyja Ólafsdóttir, Caswell Barry, Zeb Kurth-Nelson, Timothy E Behrens (2021) Temporally delayed linear modelling (TDLM) measures replay in both animals and humans eLife https://doi.org/10.7554/eLife.66917","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Specifically: https://github.com/YunzheLiu/TDLM/blob/master/Simulate_Replay.m","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Original code, has dark background, my julia translation is in grey.","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Of course it makes use of the functions within this package:","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"using TDLM","category":"page"},{"location":"md/eLife/#Training-Decoders","page":"Translation eLife","title":"Training Decoders","text":"","category":"section"},{"location":"md/eLife/#Simulating-Data","page":"Translation eLife","title":"Simulating Data","text":"","category":"section"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Much of the details of the data simulation has been abstracted away and the functions are availible in the sub-package TDLM.Simulate","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"using TDLM.Simulate","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Add other needed packages:","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"using Distributions, Lasso","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Some parameters:","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"<script src=\"https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FYunzheLiu%2FTDLM%2Fblob%2F5e8679dec3026037918057a5f38799e9b066deda%2FSimulate_Replay.m%23L7-L23&style=atom-one-dark-reasonable&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on\"></script>","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"nSensors = 273;\nnStates = 8;\nnTrainPerStim = 18;\nnothing #hide","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Here we sample commonPattern from a normal distribution and create copies with 50% noise. See documentation for Simulate.Noise.","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"commonPattern = randn(1, nSensors);\npatterns = repeat(commonPattern, 1, 1, nStates) + Noise();\nnothing #hide","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"<script src=\"https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FYunzheLiu%2FTDLM%2Fblob%2F5e8679dec3026037918057a5f38799e9b066deda%2FSimulate_Replay.m%23L47-L49&style=atom-one-dark-reasonable&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on\"></script>","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"A special pattern is only noise, therefore zeros concatinated (noise pattern is first).","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"patterns = cat(zeros(1, nSensors), patterns, dims = 3);\nnothing #hide","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"We create samples by adding irreducible error sd = 4, and obtain a three dimensionam matrix with dims: 1. observation, 2. sensor, 3. pattern/stimulus","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"trainingData = repeat(patterns, nTrainPerStim) + Noise(Normal(0, 4));\nsize(trainingData)\n(nTrainPerStim, nSensors, nStates + 1)","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"<script src=\"https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FYunzheLiu%2FTDLM%2Fblob%2F5e8679dec3026037918057a5f38799e9b066deda%2FSimulate_Replay.m%23L53-L65&style=atom-one-dark-reasonable&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on\"></script>","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Four states get more noise.","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"trainingData[:, :, sample(1:nStates, 4)] += Noise();\nnothing #hide","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"Flatten trainingData (from 3dim to 2dim)","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"trainingData = reduce(vcat, trainingData[:, :, i] for i in axes(trainingData, 3));\nnothing #hide","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"<script src=\"https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FYunzheLiu%2FTDLM%2Fblob%2F5e8679dec3026037918057a5f38799e9b066deda%2FSimulate_Replay.m%23L50&style=atom-one-dark-reasonable&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on\"></script>","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"trainingLabels = hcat(repeat((0:nStates), inner = nTrainPerStim));\nnothing #hide","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"<script src=\"https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FYunzheLiu%2FTDLM%2Fblob%2F5e8679dec3026037918057a5f38799e9b066deda%2FSimulate_Replay.m%23L67-73&style=atom-one-dark-reasonable&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on\"></script>","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"hcat([coef(fit(LassoPath,\n        trainingData,\n        vec(trainingLabels .== i),\n        Binomial(); α=1.0, nλ=100), select = MinAICc()) for i in 1:nStates]...)","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"","category":"page"},{"location":"md/eLife/","page":"Translation eLife","title":"Translation eLife","text":"This page was generated using Literate.jl.","category":"page"}]
}
