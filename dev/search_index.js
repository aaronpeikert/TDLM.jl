var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TDLM","category":"page"},{"location":"#TDLM","page":"Home","title":"TDLM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TDLM.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TDLM]","category":"page"},{"location":"#Simulate","page":"Home","title":"Simulate","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TDLM.Simulate]","category":"page"},{"location":"#TDLM.Simulate.Noise","page":"Home","title":"TDLM.Simulate.Noise","text":"Noise()\n\nAdd noise of a certain distribution to an array adopting the shape an structure of the array. If nothing else specified, randn is used, otherwise it is sampled from the distribution.\n\njulia> using TDLM.Simulate\n\njulia> zeros(3, 3) + Noise();\n\njulia> ones(Int16, 3, 3) + Noise([1, 2, 3]);\n\njulia> import Distributions\n\njulia> zeros(3, 3) + Noise(Distributions.Beta());\n\njulia> using StableRNGs # results above are suppressed, here reproducible:\n\njulia> zeros(2, 2) + Noise(Distributions.Normal(), StableRNG(42))\n2×2 Matrix{Float64}:\n -0.670252  1.37363\n  0.447122  1.30954\n\n\n\n\n\n","category":"type"},{"location":"#TDLM.Simulate.rand_cov","page":"Home","title":"TDLM.Simulate.rand_cov","text":"rand_cov(k::Int, [rng = Random.GLOBAL_RNG])\n\nGenerate a random covariance matrix of size k×k.\n\njulia> using TDLM.Simulate\n\njulia> rand_cov(3, StableRNGs.StableRNG(42))\n3×3 Matrix{Float64}:\n  1.39477     0.156631   -0.0456395\n  0.156631    1.54293    -0.0163959\n -0.0456395  -0.0163959   0.797937\n\n\n\n\n\n","category":"function"}]
}
